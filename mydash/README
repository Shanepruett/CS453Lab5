

****************
* Project 1/Shell Project Part 1
* CS 453: Operating Systems
* February 20th, 2015
* Shane Pruett
**************** 

OVERVIEW:


   Mydash is a simple shell application that is capable of filename completion
   command history, executing commands, exiting with ctrl-d or "exit", changing
   directory with "cd", having a prompt set by the global environment variable
   DASH_PROMPT, showing the version with "-v", executing process as background
   processes, mainting a list of running background process, and notifying the 
   user when a background process has compeleted. 

INCLUDED FILES:

   README		This readme file
   TestCases		File that has example test cases for mydash
   valgrind.supp	The suppression file for use with valgrind.
   git.log		A log file of git commits.

   .\dash		Directory for mydash
      mydash.c		This is the main file for the project. This file does
			looping, parsing, execing, and other tasks.
      mydash.h		The header file for mydash.c
      job.c		This is the job file that is used to keeping track of
			background processes.
      job.h		The header file for job.c
      git_version.c	This file is generated by the Makefile and is used by
			mydash to print the git version.
      git_version.h	The header file for git_version.c which is also 
			generated by the Makefile
      Makefile		The Makefile for the dash directory

   .\libsrc		Directory for libraries
      common.h		This is a header file used for Boolean typedef.
      List.c		This is the List file which is used to make a doubly
			circular linked list comprised of Nodes.
      List.h		The header file for List.c
      Node.c		This is the Node file which stores pointers to 
			objects and link to one another in the List.
      Node.h		The header file for Node.h
      Makefile		The Makefile for the libsrc directory, which installs
			the library files in subdirectories.

   .\include		The directory that will store header files for libararies
   .\lib		The directory that will store .a and .so files for the
			libraries upon make.
   .\test-harness	The directory containing example test harnesses.
   .\testsuite		The directory containing tests for List.


BUILDING AND RUNNING:

   Compile the program, from mydash directory type:
    $ make

   Run the pogram, from mydash directory type:
    $ mydash

PROGRAM DESIGN:

   The biggest design decision I made in my program was to utilize
   pointer arithmetic during my parsing. It is super slick and 
   made the most sense given the way execvp works. 

   Revisions I will likely make in the future to this project will be
   have some sort of process handler instead of having Job handling done
   within mydash. This will make it more clear what the responsibilities
   of each file are. I also want to turn more of the control flow statements
   to call functions instead of handling the control within the statements.

   The list is very simple, its made of nodes that link together circularly. 
   Each node has an object, in this case a job.

   Mydash uses Jobs to store info about background processes.
 

TESTING:

   Unfortunately I didn't allow myself sufficient time to run adequate
   automated tests. The majority of my tests were done through the 
   writing of the program, but running the application and analyzing the
   results. 

   I also used Valgrind to test my application and was able to catch 
   many memory leaks.

   ==28082== 
   ==28082== HEAP SUMMARY:
   ==28082==     in use at exit: 110,257 bytes in 205 blocks
   ==28082==   total heap usage: 371 allocs, 166 frees, 124,806 bytes allocated
   ==28082== 
   ==28082== Searching for pointers to 205 not-freed blocks
   ==28082== Checked 194,976 bytes
   ==28082== 
   ==28082== LEAK SUMMARY:
   ==28082==    definitely lost: 0 bytes in 0 blocks
   ==28082==    indirectly lost: 0 bytes in 0 blocks
   ==28082==      possibly lost: 0 bytes in 0 blocks
   ==28082==    still reachable: 0 bytes in 0 blocks
   ==28082==         suppressed: 110,257 bytes in 205 blocks
   ==28082== 
   ==28082== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 12 from 4)
   --28082-- 
   --28082-- used_suppression:     39 readline_leaks valgrind.supp:11 suppressed: 109,525 bytes in 180 blocks
   --28082-- used_suppression:      4 history_leaks valgrind.supp:20 suppressed: 732 bytes in 25 blocks
   --28082-- used_suppression:      9 readline_errors valgrind.supp:2
   --28082-- used_suppression:      2 glibc-2.5.x-on-SUSE-10.2-(PPC)-2a /usr/lib64/valgrind/default.supp:1286
   ==28082== 
   ==28082== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 12 from 4)

   My application handles bad input similarly to how bash does. It simply state
   there was an error and returns to the prompt. Because I haven't done sufficient
   testing I am unaware of any unusual bugs. I would like to find out if my 
   application will take only 2048 arguments as i suspect it does.


DISCUSSION:
 
   I did not listen to Shane Panter when he said I needed two weeks to 
   program this project and two weeks to test it. This is a formal 
   acknowledgement of his omniscience. 

   I spent roughly six hours of my time trying to get my Makefiles to
   run correctly. I struggled mightily with linking libraries. I am now
   very proud of my Makefiles however.

   I spent a majority of my time researching how to do pointer arithmetic,
   handle structs, free memory, and general syntax of the C language. 
   However the rest of the project came very easily. The forking and executing
   was very straight forward and not at all confusing. 

   I still struggle using git. My fear of git is obvious by how infrequent
   my commits are.

   All that being said, I really enjoy programming in C. Don't tell anyone.

EXTRA CREDIT:

   None.
